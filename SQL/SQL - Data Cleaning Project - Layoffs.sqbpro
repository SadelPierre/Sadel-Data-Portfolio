<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/sadel/Documents/Data Analyst Portforlio Project/Layoffs.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1094"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainlayoffs"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="layoffs" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="155"/><column index="2" value="92"/><column index="3" value="91"/><column index="4" value="78"/><column index="5" value="113"/><column index="6" value="66"/><column index="7" value="78"/><column index="8" value="89"/><column index="9" value="122"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- Data Cleaning Project

SELECT * 
FROM layoffs;

/*Steps in Cleaning
	1. Remove Duplicates
	2. Standardize the Data 
	3. Null Values or Blank Values 
	4. Remove Any Unnecessary Columns
*/

-- Create Staging TABLE

CREATE TABLE layoffs_staging AS
SELECT * 
FROM layoffs;

SELECT *
From layoffs_staging;

-- Step 1. Remove Duplicate
	-- Since there are no unique row ids, I will create one using window functions to help identify duplicate entries
	
SELECT *, 
row_number() OVER(
PARTITION by company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) AS row_num
From layoffs_staging;

	-- using CTE to indentify duplicate entries

WITH duplicate_cte AS
(
SELECT *, 
row_number() OVER(
PARTITION by company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) AS row_num
From layoffs_staging
)
SELECT *
FROM duplicate_cte
WHERE row_num &gt; 1;

	-- Creating second staging table in order to delete the duplicate values 

CREATE TABLE layoffs_staging2 AS
SELECT *, 
row_number() OVER(
PARTITION by company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) AS row_num
From layoffs_staging;

SELECT *
FROM layoffs_staging2
WHERE company = 'Casper';

SELECT *
FROM layoffs_staging2
WHERE row_num &gt; 1;

DELETE
FROM layoffs_staging2
WHERE row_num &gt; 1;

SELECT *
FROM layoffs_staging2
;


-- Step 2 Standaizing Data 
	-- Finding issues with the data and fixing them. I will be checking each column indivdually

-- Company: No Errors Found
SELECT company,  trim(company)
FROM layoffs_staging2;

-- Inddustry: duplicate labeling for Crypto ('Crypto Currency', 'CryptoCurrency')
SELECT DISTINCT industry
FROM layoffs_staging2;

SELECT * 
FROM layoffs_staging2
WHERE industry like 'Crypto%';

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry like 'Crypto%';

SELECT * 
FROM layoffs_staging2
WHERE industry like 'Crypto%';

	-- Location: Düsseldorf is misspelt as Dusseldorf
SELECT DISTINCT location
FROM layoffs_staging2
order by location;

SELECT * 
FROM layoffs_staging2
WHERE location like '%sseldorf';

UPDATE layoffs_staging2
SET location = 'Düsseldorf'
WHERE location like '%sseldorf';


	-- Country: United States has duplicate entry as 'United States.'.
SELECT DISTINCT country
FROM layoffs_staging2
ORDER by country;

SELECT *
FROM layoffs_staging2
WHERE country like 'United States%';

UPDATE layoffs_staging2
SET country = 'United States'
WHERE country like 'United States%';

SELECT DISTINCT country
FROM layoffs_staging2
WHERE country like 'united states%';


SELECT date
FROM layoffs_staging2;

-- Converting date field to ISO8601 format

-- Create a new table with padded zeros in order to convert to ISO8601 format
CREATE TABLE layoffs_with_padded_dates AS
SELECT 
    company,
    location,
    industry,
    total_laid_off,
    percentage_laid_off,
    -- Add leading zeros to the day and month
    printf('%02d', CAST(substr(date, 1, instr(date, '/') - 1) AS INTEGER)) || '/' || 
    printf('%02d', CAST(substr(date, instr(date, '/') + 1, instr(substr(date, instr(date, '/') + 1), '/') - 1) AS INTEGER)) || '/' || 
    substr(date, instr(substr(date, instr(date, '/') + 1), '/') + instr(date, '/') + 1) AS padded_date,
    stage,
    country,
    funds_raised_millions,
    row_num
FROM layoffs_staging2;

SELECT *
FROM layoffs_with_padded_dates;

SELECT *, substr(padded_date, 7, 4) || '-' || 
    substr(padded_date, 1, 2) || '-' || 
    substr(padded_date, 4, 2) AS iso8601_date
FROM layoffs_with_padded_dates;

CREATE TABLE new_dates AS
SELECT *, substr(padded_date, 7, 4) || '-' || 
    substr(padded_date, 1, 2) || '-' || 
    substr(padded_date, 4, 2) AS iso8601_date
FROM layoffs_with_padded_dates;

SELECT * 
FROM new_dates;

UPDATE new_dates
SET padded_date = iso8601_date;

SELECT company, location, industry, total_laid_off, percentage_laid_off, padded_date, stage, country, funds_raised_millions
FROM new_dates;

CREATE TABLE layoffs_staging3 AS
SELECT company, location, industry, total_laid_off, percentage_laid_off, padded_date, stage, country, funds_raised_millions
FROM new_dates;

SELECT *
FROM layoffs_staging3;

-- Handling Null Values 
	-- Finding records with Null  industry values 
SELECT *
FROM layoffs_staging3
WHERE industry = 'NULL'
;

SELECT *
FROM layoffs_staging3
WHERE  industry is null
;


UPDATE layoffs_staging3
SET industry = NULL
WHERE industry = 'NULL'
;

SELECT t2.industry
FROM layoffs_staging3 as t1
JOIN layoffs_staging3 as t2
	on t1.company = t2.company
	AND t1.location = t2.location
 WHERE t1.industry is NULL
 AND t2.industry is NOT NULL
 ;
 
	-- Fill NULL values in the 'industry' column based on matching 'company' and 'location'
	
UPDATE layoffs_staging3
SET industry = (
	SELECT t2.industry
	FROM layoffs_staging3 as t1
		JOIN layoffs_staging3 as t2
			on t1.company = t2.company
			AND t1.location = t2.location
		WHERE t1.industry is NULL
		AND t2.industry is NOT NULL
 )
WHERE industry is NULL;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
