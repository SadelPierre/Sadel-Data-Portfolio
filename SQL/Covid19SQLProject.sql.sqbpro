<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/sadel/Downloads/SQL.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="5336"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="0" parent="2"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,11:mainCovidDeaths"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="CovidDeaths" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="64"/><column index="2" value="57"/><column index="3" value="69"/><column index="4" value="69"/><column index="5" value="79"/><column index="6" value="68"/><column index="7" value="64"/><column index="8" value="122"/><column index="9" value="74"/><column index="10" value="70"/><column index="11" value="127"/><column index="12" value="132"/><column index="13" value="128"/><column index="14" value="186"/><column index="15" value="137"/><column index="16" value="134"/><column index="17" value="191"/><column index="18" value="102"/><column index="19" value="73"/><column index="20" value="136"/><column index="21" value="82"/><column index="22" value="146"/><column index="23" value="129"/><column index="24" value="193"/><column index="25" value="139"/><column index="26" value="203"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*
Covid 19 Data Exploration 

Skills used: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views, Converting Data Types

*/

-- Select Data that we are going to be starting with

SELECT 
  location,
	date,
	total_cases,
	new_cases,
	total_deaths,
	population
FROM CovidDeaths 
ORDER BY 1,2

-- Looking at Total Cases vs Total Deaths
-- Shows the likihood of dying if you contract covid in your country
SELECT 
	location,
	date,
	total_cases,
	total_deaths,
	(total_deaths / total_cases) * 100 as DeathPercentage
FROM CovidDeaths 
WHERE location like '%Lucia%'
AND continent is NOT NULL
ORDER BY 1,2

--Looking at total cases vs population
--Shows what percentage of the population have gotten covid. 
SELECT 
	location,
	date,
	population,
	total_cases,
	(total_cases / population) * 100 as infectionPercentage
FROM CovidDeaths 
WHERE location like '%Lucia%'
AND continent is NOT NULL
ORDER BY 1,2


--Looking for countries with the hightest infection rates by country
SELECT 
	location,
	population,
	max(total_cases) AS  HighestInfectionCount,
	max((total_cases / population)) * 100 as PercentPopulationInfected
FROM CovidDeaths 
WHERE continent is NOT NULL
GROUP by location, population
ORDER BY PercentPopulationInfected DESC


--Showing Countries with Highest Death Count per population
SELECT 
	location,
	max(total_deaths) as TotalDeathCount
FROM CovidDeaths 
WHERE continent is NOT NULL
GROUP by location
ORDER BY TotalDeathCount DESC


--View by continent
SELECT 
	location,
	max(total_deaths) as TotalDeathCount
FROM CovidDeaths 
WHERE continent is NULL
GROUP by location
ORDER BY TotalDeathCount DESC


-- Global Numbers by day

SELECT
	date,
	sum(new_cases) as total_cases,
	sum(new_deaths) as total_deaths,
	(sum(new_deaths) / sum(new_cases)) * 100 as DeathPercentage
FROM CovidDeaths
WHERE continent is NOT NULL
GROUP by date
ORDER by 1,2

-- Global Numbers (Total)

SELECT
	sum(new_cases) as total_cases,
	sum(new_deaths) as total_deaths,
	(sum(new_deaths) / sum(new_cases)) * 100 as DeathPercentage
FROM CovidDeaths
WHERE continent is NOT NULL
--GROUP by date
ORDER by 1,2


-- Total Population vs Vaccinations
-- Shows Percentage of Population that has recieved at least one Covid Vaccine
SELECT 
	dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vacc.new_vaccinations,
	sum( vacc.new_vaccinations) OVER (PARTITION by dea.location ORDER by dea.location, dea.date) as RollingPeopleVaccinated
FROM CovidDeaths as dea
JOIN CovidVaccinations as vacc
	on dea.location = vacc.location
	AND dea.date = vacc.date
WHERE dea.continent is not NULL
Order by 2,3


--Use CTE

WITH PopvsVac (continent, location, date, population, new_vaccinations, RollingPeopleVaccinated)
as
(
SELECT 
	dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vacc.new_vaccinations,
	sum(vacc.new_vaccinations) OVER (PARTITION by dea.location ORDER by dea.location, dea.date) as RollingPeopleVaccinated
FROM CovidDeaths as dea
JOIN CovidVaccinations as vacc
	on dea.location = vacc.location
	AND dea.date = vacc.date
WHERE dea.continent is not NULL
--Order by 2,3
)

SELECT *, (RollingPeopleVaccinated / population)*100
FROM PopvsVac


--Temp Tables

DROP TABLE if EXISTS #PercentPopulationVaccinated
CREATE TABLE #PercentPopulationVaccinated
(
	Continent TEXT,
	Location TEXT),
	Date datetime,
	Population real,
	new_vaccinations REAL,
	RollingPeopleVaccinated REAL
)

Insert INTO #PercentPopulationVaccinated
SELECT 
	dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vacc.new_vaccinations,
	sum(vacc.new_vaccinations) OVER (PARTITION by dea.location ORDER by dea.location, dea.date) as RollingPeopleVaccinated
FROM CovidDeaths as dea
JOIN CovidVaccinations as vacc
	on dea.location = vacc.location
	AND dea.date = vacc.date
WHERE dea.continent is not NULL

SELECT *, (RollingPeopleVaccinated / population)*100
FROM #PercentPopulationVaccinated



--Create View

CREATE VIEW PercentPopulationVaccinated as
SELECT 
	dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vacc.new_vaccinations,
	sum( vacc.new_vaccinations) OVER (PARTITION by dea.location ORDER by dea.location, dea.date) as RollingPeopleVaccinated
FROM CovidDeaths as dea
JOIN CovidVaccinations as vacc
	on dea.location = vacc.location
	AND dea.date = vacc.date
WHERE dea.continent is not NULL
Order by 2,3




</sql><current_tab id="0"/></tab_sql></sqlb_project>
