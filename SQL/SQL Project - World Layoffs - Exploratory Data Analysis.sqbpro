<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/sadel/Documents/Data Analyst Portforlio Project/SQL Project - World Layoffs - Exploratory Data Analysis.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1133"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,16:mainlayoffs_staging3"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="layoffs_staging3" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="134"/><column index="2" value="91"/><column index="3" value="82"/><column index="4" value="78"/><column index="5" value="113"/><column index="6" value="76"/><column index="7" value="78"/><column index="8" value="114"/><column index="9" value="122"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- Exploratory Data Analysis
	/* This is using the World Layoffs dataset which was cleaned in the previous project 
		found here: https://github.com/SadelPierre/Sadel-Data-Portfolio/blob/main/SQL/SQL%20-%20Data%20Cleaning%20Project%20-%20Layoffs.sqbpro*/
		


Select sum(total_laid_off)
FROM layoffs_staging3;

	/*Removing entries with Null values for total_laid_off and percentage_laid_off 
		as we would not be able to gather any information from these entries.*/
		
	
DELETE
FROM layoffs_staging3
WHERE total_laid_off = 'NULL'
AND percentage_laid_off = 'NULL'
;

	/*Null vales in total_laid_off and percentage_laid_off are currently strings.
		I will be converting them to proper NULL values with using Nullif*/
		
UPDATE layoffs_staging3
SET total_laid_off = nullif(total_laid_off, 'NULL');

UPDATE layoffs_staging3
SET percentage_laid_off = nullif(percentage_laid_off, 'NULL');


	-- Identifying companies that laid off 100% of the company

SELECT *
FROM layoffs_staging3
WHERE percentage_laid_off = 1
ORDER by total_laid_off DESC
;

	-- Identifying companies that laid off 100% of the company that had the most funds raised

SELECT *
FROM layoffs_staging3
WHERE percentage_laid_off = 1
ORDER by funds_raised_millions DESC
;

	-- Total laid offs by company

SELECT company, sum(total_laid_off)
FROM layoffs_staging3
GROUP by  company
ORDER by 2 DESC
;

	-- Industries most impacted
	
SELECT industry, sum(total_laid_off)
FROM layoffs_staging3
GROUP by  industry
ORDER by 2 DESC
;

	-- Countries most impacted
	
SELECT country, sum(total_laid_off)
FROM layoffs_staging3
GROUP by  country
ORDER by 2 DESC
;

	-- Layoffs by date.
	
SELECT padded_date, sum(total_laid_off)
FROM layoffs_staging3
GROUP by  padded_date
ORDER by 1 DESC
;

	-- Company stage most affected.
	
SELECT stage, sum(total_laid_off)
FROM layoffs_staging3
GROUP by  stage
ORDER by 2 DESC
;

	-- View Layoffs by Year
	
SELECT substr(padded_date,1,4), sum(total_laid_off)
FROM layoffs_staging3
GROUP by substr(padded_date,1,4)
ORDER by 1 ASC
;

	-- Running layoff totals by month

WITH Rolling_Total As
(
SELECT substr(padded_date,1,7) as 'Month', sum(total_laid_off) as total_off
FROM layoffs_staging3
GROUP by substr(padded_date,1,7)
ORDER By 1 ASC
)
SELECT  Month, total_off, sum(total_off) OVER(ORDER by Month) as rolling_total
FROM Rolling_Total
;

	-- Company layoffs per year

SELECT company, substr(padded_date,1,4) as Year, sum(total_laid_off)
FROM layoffs_staging3
GROUP by company, substr(padded_date,1,4) 
ORDER BY 3 DESC
;

WITH Company_Year (Company, Year, Total_Layoffs)  as
(
SELECT company, substr(padded_date,1,4) as Year, sum(total_laid_off) AS TLO
FROM layoffs_staging3
GROUP by company, substr(padded_date,1,4)  
), Company_Year_Rank As
(
SELECT *, dense_rank() OVER (PARTITION by 'Year' ORDER by 'TLO' DESC) AS Ranking
FROM Company_Year
)
SELECT *
FROM Company_Year_Rank
;</sql><current_tab id="0"/></tab_sql></sqlb_project>
